<div class="row">
    <div>
        <h3>Getting started</h3>
        <ul>
            <li>Authorization generates a token</li>
            <li>Tokens given access to resources</li>
            <li>
                Protects revealing password to app if token is generated by third party (Facebook, Google...)
            </li>
            <li>
                A controller with support is generated in the web api template when you select individual accounts
            </li>
            <li>
                Token is passed in the header
            </li>
            <li>
                Can also create your own provider/parser
            </li>
        </ul>

        <h3>Registration:</h3>
        <img src="~/resources/images/register.PNG" />
        <hr />
        <h3>Go to <a href="/Home/login">login</a></h3>

        <h3>How it works (<a href="http://www.asp.net/web-api/overview/security/individual-accounts-in-web-api">More info</a>):</h3>

        Here are the main application classes that implement these features:
        <ul>
            <li>AccountController. Provides a Web API endpoint for managing user accounts. The Register action is the only one that we used in this tutorial. Other methods on the class support password reset, social logins, and other functionality.</li>
            <li>ApplicationUser, defined in /Models/IdentityModels.cs. This class is the EF model for user accounts in the membership database.</li>
            <li>ApplicationUserManager, defined in /App_Start/IdentityConfig.cs This class derives from UserManager and performs operations on user accounts, such as creating a new user, verifying passwords, and so forth, and automatically persists changes to the database.</li>
            <li>ApplicationOAuthProvider. This object plugs into the OWIN middleware, and processes events raised by the middleware. It derives from OAuthAuthorizationServerProvider.</li>
        </ul>

        <p>In StartupAuth.cs, the following code configures the OAuth2 authorization server.</p>
        <p>The TokenEndpointPath property is the URL path to the authorization server endpoint. That’s the URL that app uses to get the bearer tokens.</p>
        <p>The Provider property specifies a provider that plugs into the OWIN middleware, and processes events raised by the middleware.</p>
        <p>Here is the basic flow when the app wants to get a token:</p>
        <ol>
            <li>To get an access token, the app sends a request to ~/Token.</li>
            <li>The OAuth middleware calls GrantResourceOwnerCredentials on the provider.</li>
            <li>The provider calls the ApplicationUserManager to validate the credentials and create a claims identity.</li>
            <li>If that succeeds, the provider creates an authentication ticket, which is used to generate the token.</li>
        </ol>
    </div>
</div>
